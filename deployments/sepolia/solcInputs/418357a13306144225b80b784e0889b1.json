{
  "language": "Solidity",
  "sources": {
    "contracts/MyToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract MyToken is IERC20 {\n    string public name ;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping (address => uint256)) public allowance;\n\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        /// @dev initializing contract with 10 minted tokens\n        mint(msg.sender, 10*(10**decimals));\n    }\n\n    /// Emitted when value tokens are moved from one account (from) to another (to).\n    function transfer(address to, uint256 value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= value, \"Insufficient balance for this transaction\");\n        balanceOf[msg.sender] -= value;\n        balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);   \n        return true;  \n    }\n\n    /// Moves amount tokens from from to to using the allowance mechanism. amount is then deducted from the caller’s allowance.\n    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance for this transaction\");\n        require(balanceOf[from] >= value, \"Insufficient balance for this transaction\");\n        balanceOf[from] -= value;\n        balanceOf[to] += value;\n        allowance[from][msg.sender] -= value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    /// Sets amount as the allowance of spender over the caller’s tokens.\n    function approve(address spender, uint256 value) public returns (bool success) {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /// Creates amount tokens and assigns them to account, increasing the total supply.\n    /// @notice acccount should not be zero address\n    function mint(address account, uint256 amount) public {\n        require(account != address(0x0), \"Zero address account is not allowed\");\n        balanceOf[account] += amount;\n        totalSupply += amount;\n        emit Transfer(address(0x0), account, amount);\n    }\n\n    /// Destroys amount tokens from account, reducing the total supply.\n    /// @notice acccount should not be zero address\n    function burn(address account, uint256 amount) public {\n        require(account != address(0x0), \"Zero address account is not allowed\");\n        require(balanceOf[account] >= amount, \"Insufficient balance\");\n        balanceOf[account] -= amount;\n        totalSupply -= amount;\n        emit Transfer(account, address(0x0), amount);\n    }\n}\n\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}